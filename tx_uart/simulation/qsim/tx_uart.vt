// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/20/2023 22:47:02"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    tx_uart
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module tx_uart_vlg_sample_tst(
	button,
	clk,
	data,
	reset,
	sampler_tx
);
input  button;
input  clk;
input [6:0] data;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(button or clk or data or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module tx_uart_vlg_check_tst (
	output_data,
	ssd_1,
	ssd_2,
	sampler_rx
);
input  output_data;
input [6:0] ssd_1;
input [6:0] ssd_2;
input sampler_rx;

reg  output_data_expected;
reg [6:0] ssd_1_expected;
reg [6:0] ssd_2_expected;

reg  output_data_prev;
reg [6:0] ssd_1_prev;
reg [6:0] ssd_2_prev;

reg  output_data_expected_prev;
reg [6:0] ssd_1_expected_prev;
reg [6:0] ssd_2_expected_prev;

reg  last_output_data_exp;
reg [6:0] last_ssd_1_exp;
reg [6:0] last_ssd_2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	output_data_prev = output_data;
	ssd_1_prev = ssd_1;
	ssd_2_prev = ssd_2;
end

// update expected /o prevs

always @(trigger)
begin
	output_data_expected_prev = output_data_expected;
	ssd_1_expected_prev = ssd_1_expected;
	ssd_2_expected_prev = ssd_2_expected;
end



// expected output_data
initial
begin
	output_data_expected = 1'bX;
end 
// expected ssd_2[ 6 ]
initial
begin
	ssd_2_expected[6] = 1'bX;
end 
// expected ssd_2[ 5 ]
initial
begin
	ssd_2_expected[5] = 1'bX;
end 
// expected ssd_2[ 4 ]
initial
begin
	ssd_2_expected[4] = 1'bX;
end 
// expected ssd_2[ 3 ]
initial
begin
	ssd_2_expected[3] = 1'bX;
end 
// expected ssd_2[ 2 ]
initial
begin
	ssd_2_expected[2] = 1'bX;
end 
// expected ssd_2[ 1 ]
initial
begin
	ssd_2_expected[1] = 1'bX;
end 
// expected ssd_2[ 0 ]
initial
begin
	ssd_2_expected[0] = 1'bX;
end 
// expected ssd_1[ 6 ]
initial
begin
	ssd_1_expected[6] = 1'bX;
end 
// expected ssd_1[ 5 ]
initial
begin
	ssd_1_expected[5] = 1'bX;
end 
// expected ssd_1[ 4 ]
initial
begin
	ssd_1_expected[4] = 1'bX;
end 
// expected ssd_1[ 3 ]
initial
begin
	ssd_1_expected[3] = 1'bX;
end 
// expected ssd_1[ 2 ]
initial
begin
	ssd_1_expected[2] = 1'bX;
end 
// expected ssd_1[ 1 ]
initial
begin
	ssd_1_expected[1] = 1'bX;
end 
// expected ssd_1[ 0 ]
initial
begin
	ssd_1_expected[0] = 1'bX;
end 
// generate trigger
always @(output_data_expected or output_data or ssd_1_expected or ssd_1 or ssd_2_expected or ssd_2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected output_data = %b | expected ssd_1 = %b | expected ssd_2 = %b | ",output_data_expected_prev,ssd_1_expected_prev,ssd_2_expected_prev);
	$display("| real output_data = %b | real ssd_1 = %b | real ssd_2 = %b | ",output_data_prev,ssd_1_prev,ssd_2_prev);
`endif
	if (
		( output_data_expected_prev !== 1'bx ) && ( output_data_prev !== output_data_expected_prev )
		&& ((output_data_expected_prev !== last_output_data_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_data :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_data_expected_prev);
		$display ("     Real value = %b", output_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_data_exp = output_data_expected_prev;
	end
	if (
		( ssd_1_expected_prev[0] !== 1'bx ) && ( ssd_1_prev[0] !== ssd_1_expected_prev[0] )
		&& ((ssd_1_expected_prev[0] !== last_ssd_1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd_1_expected_prev);
		$display ("     Real value = %b", ssd_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ssd_1_exp[0] = ssd_1_expected_prev[0];
	end
	if (
		( ssd_1_expected_prev[1] !== 1'bx ) && ( ssd_1_prev[1] !== ssd_1_expected_prev[1] )
		&& ((ssd_1_expected_prev[1] !== last_ssd_1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd_1_expected_prev);
		$display ("     Real value = %b", ssd_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ssd_1_exp[1] = ssd_1_expected_prev[1];
	end
	if (
		( ssd_1_expected_prev[2] !== 1'bx ) && ( ssd_1_prev[2] !== ssd_1_expected_prev[2] )
		&& ((ssd_1_expected_prev[2] !== last_ssd_1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd_1_expected_prev);
		$display ("     Real value = %b", ssd_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ssd_1_exp[2] = ssd_1_expected_prev[2];
	end
	if (
		( ssd_1_expected_prev[3] !== 1'bx ) && ( ssd_1_prev[3] !== ssd_1_expected_prev[3] )
		&& ((ssd_1_expected_prev[3] !== last_ssd_1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd_1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd_1_expected_prev);
		$display ("     Real value = %b", ssd_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ssd_1_exp[3] = ssd_1_expected_prev[3];
	end
	if (
		( ssd_1_expected_prev[4] !== 1'bx ) && ( ssd_1_prev[4] !== ssd_1_expected_prev[4] )
		&& ((ssd_1_expected_prev[4] !== last_ssd_1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd_1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd_1_expected_prev);
		$display ("     Real value = %b", ssd_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ssd_1_exp[4] = ssd_1_expected_prev[4];
	end
	if (
		( ssd_1_expected_prev[5] !== 1'bx ) && ( ssd_1_prev[5] !== ssd_1_expected_prev[5] )
		&& ((ssd_1_expected_prev[5] !== last_ssd_1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd_1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd_1_expected_prev);
		$display ("     Real value = %b", ssd_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ssd_1_exp[5] = ssd_1_expected_prev[5];
	end
	if (
		( ssd_1_expected_prev[6] !== 1'bx ) && ( ssd_1_prev[6] !== ssd_1_expected_prev[6] )
		&& ((ssd_1_expected_prev[6] !== last_ssd_1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd_1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd_1_expected_prev);
		$display ("     Real value = %b", ssd_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ssd_1_exp[6] = ssd_1_expected_prev[6];
	end
	if (
		( ssd_2_expected_prev[0] !== 1'bx ) && ( ssd_2_prev[0] !== ssd_2_expected_prev[0] )
		&& ((ssd_2_expected_prev[0] !== last_ssd_2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd_2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd_2_expected_prev);
		$display ("     Real value = %b", ssd_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ssd_2_exp[0] = ssd_2_expected_prev[0];
	end
	if (
		( ssd_2_expected_prev[1] !== 1'bx ) && ( ssd_2_prev[1] !== ssd_2_expected_prev[1] )
		&& ((ssd_2_expected_prev[1] !== last_ssd_2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd_2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd_2_expected_prev);
		$display ("     Real value = %b", ssd_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ssd_2_exp[1] = ssd_2_expected_prev[1];
	end
	if (
		( ssd_2_expected_prev[2] !== 1'bx ) && ( ssd_2_prev[2] !== ssd_2_expected_prev[2] )
		&& ((ssd_2_expected_prev[2] !== last_ssd_2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd_2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd_2_expected_prev);
		$display ("     Real value = %b", ssd_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ssd_2_exp[2] = ssd_2_expected_prev[2];
	end
	if (
		( ssd_2_expected_prev[3] !== 1'bx ) && ( ssd_2_prev[3] !== ssd_2_expected_prev[3] )
		&& ((ssd_2_expected_prev[3] !== last_ssd_2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd_2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd_2_expected_prev);
		$display ("     Real value = %b", ssd_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ssd_2_exp[3] = ssd_2_expected_prev[3];
	end
	if (
		( ssd_2_expected_prev[4] !== 1'bx ) && ( ssd_2_prev[4] !== ssd_2_expected_prev[4] )
		&& ((ssd_2_expected_prev[4] !== last_ssd_2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd_2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd_2_expected_prev);
		$display ("     Real value = %b", ssd_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ssd_2_exp[4] = ssd_2_expected_prev[4];
	end
	if (
		( ssd_2_expected_prev[5] !== 1'bx ) && ( ssd_2_prev[5] !== ssd_2_expected_prev[5] )
		&& ((ssd_2_expected_prev[5] !== last_ssd_2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd_2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd_2_expected_prev);
		$display ("     Real value = %b", ssd_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ssd_2_exp[5] = ssd_2_expected_prev[5];
	end
	if (
		( ssd_2_expected_prev[6] !== 1'bx ) && ( ssd_2_prev[6] !== ssd_2_expected_prev[6] )
		&& ((ssd_2_expected_prev[6] !== last_ssd_2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd_2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd_2_expected_prev);
		$display ("     Real value = %b", ssd_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ssd_2_exp[6] = ssd_2_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module tx_uart_vlg_vec_tst();
// constants                                           
// general purpose registers
reg button;
reg clk;
reg [6:0] data;
reg reset;
// wires                                               
wire output_data;
wire [6:0] ssd_1;
wire [6:0] ssd_2;

wire sampler;                             

// assign statements (if any)                          
tx_uart i1 (
// port map - connection between master ports and signals/registers   
	.button(button),
	.clk(clk),
	.data(data),
	.output_data(output_data),
	.reset(reset),
	.ssd_1(ssd_1),
	.ssd_2(ssd_2)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b1;
end 

// button
initial
begin
	button = 1'b1;
	button = #40000 1'b0;
	button = #20000 1'b1;
end 
// data[ 6 ]
initial
begin
	data[6] = 1'b1;
end 
// data[ 5 ]
initial
begin
	data[5] = 1'b1;
end 
// data[ 4 ]
initial
begin
	data[4] = 1'b0;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b1;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b0;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b0;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b1;
end 

tx_uart_vlg_sample_tst tb_sample (
	.button(button),
	.clk(clk),
	.data(data),
	.reset(reset),
	.sampler_tx(sampler)
);

tx_uart_vlg_check_tst tb_out(
	.output_data(output_data),
	.ssd_1(ssd_1),
	.ssd_2(ssd_2),
	.sampler_rx(sampler)
);
endmodule

